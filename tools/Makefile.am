# Network UPS Tools: generators and other tools

# Export certain values for ccache which NUT ci_build.sh can customize,
# to facilitate developer iteration re-runs of "make" later.
# At least GNU and BSD make implementations are okay with this syntax.
@NUT_AM_MAKE_CAN_EXPORT@export CCACHE_NAMESPACE=@CCACHE_NAMESPACE@
@NUT_AM_MAKE_CAN_EXPORT@export CCACHE_BASEDIR=@CCACHE_BASEDIR@
@NUT_AM_MAKE_CAN_EXPORT@export CCACHE_DIR=@CCACHE_DIR@
@NUT_AM_MAKE_CAN_EXPORT@export CCACHE_PATH=@CCACHE_PATH@
@NUT_AM_MAKE_CAN_EXPORT@export PATH=@PATH_DURING_CONFIGURE@

# SUBDIRS are explicitly a listing of all the directories that make
# must recurse into BEFORE processing the current directory.
#
# These python scripts must be moved into a sub-directory, and _only_
# executed IF they need to be, and all the nut-scanner sources need
# to be moved out of a sub-directory into this directory.
#
# Anyway, for the time being, we force build in ./ before nut-scanner,
# to have nutscan-{usb,snmp}.h built before going into the nut-scanner
# sub-directory. For good measure we also call this from nut-scanner's
# make, to handle developer workflow (editing the *.c sources this uses).
SUBDIRS = . nut-scanner nutconf

PYTHON = @PYTHON@

EXTRA_DIST = nut-usbinfo.pl nut-recorder.sh nut-ddl-dump.sh nut-dumpdiff.sh \
  gitlog2changelog.py.in nut-snmpinfo.py.in driver-list-format.sh

# These files are generated for nut-scanner builds (and cleaned as any others),
# and can change as respective SNMP/USB subdriver sources are iterated by a
# locally active developer:
GENERATED_SNMP_FILES = nut-scanner/nutscan-snmp.h

GENERATED_USB_FILES = nut-scanner/nutscan-usb.h

# These files for OS integration are generated by `autogen.sh` and distributed
# by a release tarball (and not normally cleaned away). While technically their
# contents can change as respective USB subdriver sources are iterated by a
# locally active developer (especially changing supported VID:PID combinations),
# this is not a requirement that would block local re-builds nor a frequent
# use case. So they are not normally rebuilt intentionally (could be anyway,
# as part of nut-scanner dependency re-generations), and for install/release
# after such fundamental changes the project should better run `autogen.sh`.

# Hotplug output file
GENERATED_USB_OS_FILES = $(top_builddir)/scripts/hotplug/libhid.usermap

# udev output file
GENERATED_USB_OS_FILES += $(top_builddir)/scripts/udev/nut-usbups.rules.in

# BSD devd output file
GENERATED_USB_OS_FILES += $(top_builddir)/scripts/devd/nut-usb.conf.in

# FreeBSD quirks output file
GENERATED_USB_OS_FILES += $(top_builddir)/scripts/devd/nut-usb.quirks

# UPower output file
# Note: unlike others above, this one is currently tracked in Git
GENERATED_USB_OS_FILES += $(top_builddir)/scripts/upower/95-upower-hid.hwdb

CLEANFILES = $(GENERATED_SNMP_FILES) $(GENERATED_USB_FILES)
# We do not clean away these files, some are even tracked in Git:
#CLEANFILES += $(GENERATED_USB_OS_FILES)

all: nut-scanner-deps $(GENERATED_USB_OS_FILES)

# This target is called from the making of nut-scanner to ensure its bits
nut-scanner-deps: $(GENERATED_SNMP_FILES) $(GENERATED_USB_FILES)

# Aliases for particular files, if someone has a need:
nut-scanner-deps-snmpinfo: $(GENERATED_SNMP_FILES)
nut-scanner-deps-usb: $(GENERATED_USB_FILES)

# The distributed nut-snmpinfo.py.in template is assumed to only differ from
# a generated nut-snmpinfo.py by the @PYTHON@ shebang.
$(GENERATED_SNMP_FILES): $(top_srcdir)/drivers/*-mib.c $(top_srcdir)/tools/nut-snmpinfo.py.in
	@if [ -n "$(PYTHON)" ] && [ x"no" != x"$(PYTHON)" ] && $(PYTHON) -c 1; then \
		echo "Regenerating the SNMP helper files in SRC dir with '$(PYTHON)'."; \
		TOP_SRCDIR="$(top_srcdir)" ; export TOP_SRCDIR; \
		TOP_BUILDDIR="$(top_builddir)" ; export TOP_BUILDDIR; \
		cd $(builddir) && $(PYTHON) $(top_srcdir)/tools/nut-snmpinfo.py.in; \
	else \
		echo "----------------------------------------------------------------------"; \
		echo "Warning: Python is not available."; \
		echo "Skipping the SNMP helper files regeneration in SRC dir."; \
		echo "----------------------------------------------------------------------"; \
	fi

# Currently GENERATED_USB_FILES refers to a single file, which ensures
# that the perl script (if needed) runs once even in parallel builds.
# The GENERATED_USB_OS_FILES should not *have* to be built by make at
# all, but just in case (developer iterations) a dependency is here.
# It is expected that the files exist (from tarball or latest run of
# script for GENERATED_USB_FILES purposes), so we only confirm that
# and bump their timestamps to avoid more noise. Note that for some
# builds from scratch (with explicit envvars passed to autogen.sh)
# these files may be empty to satisfy dependencies and forfeit the
# features for a particular build.
# To facilitate "make distcheck" and out-of-tree builds, we try to
# use files pre-generated in SRCDIR if those in BUILDDIR dir are empty
# or did not appear.
$(GENERATED_USB_OS_FILES): $(GENERATED_USB_FILES)
	@test -s "$@" || echo "WARNING: GENERATED_USB_OS_FILES: '$@' is empty or missing; do not use this build to generate 'dist' tarballs" >&2
	@$(MKDIR_P) "$(@D)"
	@if ! test -s "$@" ; then \
	    if test x"$(top_srcdir)" != x"$(top_builddir)" ; then \
	        RELNAME="`echo "$@" | sed 's,^$(top_builddir)/*,,'`" ; \
	        SRCNAME="$(top_srcdir)/$${RELNAME}" ; \
	        if test -s "$${SRCNAME}" ; then \
	            echo "WARNING: GENERATED_USB_OS_FILES: using '$${SRCNAME}' for '$@'" >&2 ; \
	            cp "$${SRCNAME}" "$@" ; \
	        fi ; \
	    fi ; \
	 fi
	@touch "$@"

$(GENERATED_USB_FILES): $(top_srcdir)/drivers/*-hid.c $(top_srcdir)/drivers/*usb*.c $(top_srcdir)/drivers/nutdrv_qx.c $(top_srcdir)/tools/nut-usbinfo.pl
	@if perl -e 1; then \
		echo "Regenerating the USB helper files in SRC dir."; \
		TOP_SRCDIR="$(top_srcdir)" ; export TOP_SRCDIR; \
		TOP_BUILDDIR="$(top_builddir)" ; export TOP_BUILDDIR; \
		cd $(builddir) && $(top_srcdir)/tools/nut-usbinfo.pl; \
	else \
		echo "----------------------------------------------------------------------"; \
		echo "Warning: Perl is not available."; \
		echo "Skipping the USB helper files regeneration in SRC dir."; \
		echo "----------------------------------------------------------------------"; \
	fi

# call the USB info script upon "make dist", and if Perl is present
# call the SNMP info script upon "make dist", and if Python is present
# and call both for building nut-scanner
# Also ensure that data/driver.list is well formatted
# NOTE: Beware that current working directory for the script should be builddir
# so it may write the files in "dist" case (read-only sources), but the script
# is called from the distdir where its copy is present.
# The distributed nut-snmpinfo.py.in template is assumed to only differ from
# a generated nut-snmpinfo.py by the @PYTHON@ shebang.
dist-hook:
	@if [ -n "$(PYTHON)" ] && [ x"no" != x"$(PYTHON)" ] && $(PYTHON) -c 1; then \
		echo "Regenerating the SNMP helper files in DIST dir with '$(PYTHON)'."; \
		TOP_SRCDIR="$(top_srcdir)" ; export TOP_SRCDIR; \
		TOP_BUILDDIR="$(top_builddir)" ; export TOP_BUILDDIR; \
		$(PYTHON) $(distdir)/nut-snmpinfo.py.in; \
	else \
		echo "----------------------------------------------------------------------"; \
		echo "Warning: Python is not available."; \
		echo "Skipping the SNMP helper files regeneration in DIST dir."; \
		echo "----------------------------------------------------------------------"; \
	fi

	@if perl -e 1; then \
		echo "Regenerating the USB helper files in DIST dir."; \
		TOP_SRCDIR="$(top_srcdir)" ; export TOP_SRCDIR; \
		TOP_BUILDDIR="$(top_builddir)" ; export TOP_BUILDDIR; \
		$(distdir)/nut-usbinfo.pl; \
	else \
		echo "----------------------------------------------------------------------"; \
		echo "Warning: Perl is not available."; \
		echo "Skipping the USB helper files regeneration in DIST dir."; \
		echo "----------------------------------------------------------------------"; \
	fi

	@$(distdir)/driver-list-format.sh;

MAINTAINERCLEANFILES = Makefile.in .dirstamp

# Can be recreated by `make` or `configure`,
# impacted by choice of PYTHON version:
DISTCLEANFILES = gitlog2changelog.py
DISTCLEANFILES += nut-snmpinfo.py

.PHONY: nut-scanner-deps nut-scanner-snmp-deps nut-scanner-usb-deps
